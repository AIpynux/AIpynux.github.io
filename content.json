{"meta":{"title":"红发","subtitle":"常怀敬畏之心","description":"学习Java后端开发中","author":"AIpynux","url":"https://AIpynux.github.io"},"pages":[{"title":"个人简介","date":"2019-01-21T16:01:45.972Z","updated":"2019-01-21T16:01:45.948Z","comments":true,"path":"about/index.html","permalink":"https://AIpynux.github.io/about/index.html","excerpt":"","text":"爱折腾，喜欢Linux，Vim预备党，正努力学习Java后端技术的CUMTer，95后。"},{"title":"分类","date":"2019-02-04T04:04:10.000Z","updated":"2019-02-19T09:51:59.160Z","comments":false,"path":"categories/index.html","permalink":"https://AIpynux.github.io/categories/index.html","excerpt":"","text":""},{"title":"朋友们","date":"2019-01-21T14:46:30.048Z","updated":"2019-01-21T14:46:30.020Z","comments":true,"path":"friends/index.html","permalink":"https://AIpynux.github.io/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称: 红发头像: https://github.com/hgneer/Resource_of_Blogs/raw/master/Shanks.jpg网址: https://hgneer.github.io/标签: 爱折腾头像背景色值: #99001C"},{"title":"标签","date":"2019-02-04T04:00:38.000Z","updated":"2019-02-19T09:52:18.780Z","comments":false,"path":"tags/index.html","permalink":"https://AIpynux.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"test.md","slug":"test-md","date":"2019-02-19T14:20:27.000Z","updated":"2019-02-19T14:20:41.578Z","comments":true,"path":"2019/02/19/test-md/","link":"","permalink":"https://AIpynux.github.io/2019/02/19/test-md/","excerpt":"","text":"dfaskdfj","categories":[],"tags":[]},{"title":"配置Hexo主题之Melody","slug":"配置Hexo主题之Melody","date":"2019-02-03T09:22:10.000Z","updated":"2019-02-05T13:34:20.439Z","comments":true,"path":"2019/02/03/配置Hexo主题之Melody/","link":"","permalink":"https://AIpynux.github.io/2019/02/03/配置Hexo主题之Melody/","excerpt":"","text":"遇到问题使用Hexo的data file特性新建Melody主题的melody.yml配置文件后，将个人博客部署到本地，输入本地URL后，浏览器没有响应，提示代码如下: 123456789101112131415161718192021Unhandled rejection TypeError: /home/hgneer/Hexo/themes/melody/layout/includes/layout.pug:31 29| each url in theme.stylesheets 30| link(rel=&apos;stylesheet&apos;, href=url_for(url) + &apos;?version=&apos; + version()) &gt; 31| each item in theme.cdn.css 32| if item !== undefined 33| link(rel=&apos;stylesheet&apos;, href=item + &apos;?version=&apos; + version()) 34| include ./head.pugCannot read property &apos;css&apos; of undefined at eval (eval at wrap (/home/hgneer/Hexo/node_modules/pug-runtime/wrap.js:6:10), &lt;anonymous&gt;:80:25) at eval (eval at wrap (/home/hgneer/Hexo/node_modules/pug-runtime/wrap.js:6:10), &lt;anonymous&gt;:102:4) at template (eval at wrap (/home/hgneer/Hexo/node_modules/pug-runtime/wrap.js:6:10), &lt;anonymous&gt;:1657:72) at Theme._View.View._compiled.locals [as _compiled] (/home/hgneer/Hexo/node_modules/hexo/lib/theme/view.js:125:48) at Theme._View.View.View.render (/home/hgneer/Hexo/node_modules/hexo/lib/theme/view.js:30:15) at route.set (/home/hgneer/Hexo/node_modules/hexo/lib/hexo/index.js:394:29) at tryCatcher (/home/hgneer/Hexo/node_modules/bluebird/js/release/util.js:16:23) at /home/hgneer/Hexo/node_modules/bluebird/js/release/method.js:15:34 at RouteStream._read (/home/hgneer/Hexo/node_modules/hexo/lib/hexo/router.js:134:3) at RouteStream.Readable.read (_stream_readable.js:452:10) at resume_ (_stream_readable.js:899:12) at process._tickCallback (internal/process/next_tick.js:63:19) 解决办法需要复制到Hexo/source/_data下的_config.yml是melody主题目录下的而非Hexo目录下的。 待用特性 Slide页面(利用reveal.js) 相册页面-","categories":[{"name":"编码笔记","slug":"编码笔记","permalink":"https://AIpynux.github.io/categories/编码笔记/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://AIpynux.github.io/tags/Hexo/"}]},{"title":"可选发型","slug":"可选发型","date":"2019-01-31T08:53:55.000Z","updated":"2019-02-03T08:46:27.913Z","comments":true,"path":"2019/01/31/可选发型/","link":"","permalink":"https://AIpynux.github.io/2019/01/31/可选发型/","excerpt":"","text":"短发 板寸 碎发 莫西干 中发 复古油头","categories":[{"name":"生活笔记","slug":"生活笔记","permalink":"https://AIpynux.github.io/categories/生活笔记/"}],"tags":[]},{"title":"为Github账户设置GPG认证","slug":"为Github账户设置GPG认证","date":"2019-01-31T06:28:35.000Z","updated":"2019-02-04T04:11:18.069Z","comments":true,"path":"2019/01/31/为Github账户设置GPG认证/","link":"","permalink":"https://AIpynux.github.io/2019/01/31/为Github账户设置GPG认证/","excerpt":"概述GPG密钥算法旨在完成文件传输过程中的加密工作。 Github支持的GPG密钥算法: RSA ElGamal DSA ECDH ECDSA EdDSA 为Github账户设置GPG认证的好处: 可以限制使得对项目的commit必须经过认证后才能merge。 让项目使用者明晰哪些commit是官方认证哪些又是未经许可。","text":"概述GPG密钥算法旨在完成文件传输过程中的加密工作。 Github支持的GPG密钥算法: RSA ElGamal DSA ECDH ECDSA EdDSA 为Github账户设置GPG认证的好处: 可以限制使得对项目的commit必须经过认证后才能merge。 让项目使用者明晰哪些commit是官方认证哪些又是未经许可。 查看已有GPG密钥1gpg --list-secret-keys --keyid-format LONG 创建GPG密钥1gpg --gen-key 添加密钥到Github账户查看已创建的密钥，从中选择要添加到Github的密钥ID是6DD5E93799EE33C7。 12345678910$ gpg --list-secret-keys --keyid-format LONG/home/hgneer/.gnupg/secring.gpg-------------------------------sec 2048R/BCA9B4B1BA4C13CE 2017-04-05uid HeGuang (GPG key for HeGuang) &lt;hgneer@gmail.com&gt;ssb 2048R/D0B0CD73B2553FBB 2017-04-05sec 4096R/6DD5E93799EE33C7 2019-01-31uid AIpynux (New World!) &lt;AIpynux@gmail.com&gt;ssb 4096R/2C344A43117B0512 2019-01-31 使用如下命令将ID是6DD5E93799EE33C7的密钥的公钥输出到终端显示。 1gpg --armor --export 6DD5E93799EE33C7 之后将得到的像下面格式一样的文本复制Github账户的GPG密钥设置框。 —–BEGIN PGP PUBLIC KEY BLOCK—–公钥内容—–END PGP PUBLIC KEY BLOCK—–. 为本地Git设置全局GPG密钥ID1git config --global user.signingkey 6DD5E93799EE33C7 参考链接 GPG入门教程 Managing commit signature verification","categories":[{"name":"编码笔记","slug":"编码笔记","permalink":"https://AIpynux.github.io/categories/编码笔记/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://AIpynux.github.io/tags/Git/"},{"name":"GPG","slug":"GPG","permalink":"https://AIpynux.github.io/tags/GPG/"}]},{"title":"Vim无插件实现Markdown预览","slug":"Vim无插件Markdown预览","date":"2019-01-20T06:58:53.000Z","updated":"2019-02-02T04:11:50.005Z","comments":true,"path":"2019/01/20/Vim无插件Markdown预览/","link":"","permalink":"https://AIpynux.github.io/2019/01/20/Vim无插件Markdown预览/","excerpt":"环境 chromium-browser Markdown Viewer Ubuntu16.04 Vim","text":"环境 chromium-browser Markdown Viewer Ubuntu16.04 Vim 步骤 确保chromium-browser可以从终端输入命令启动。 为chromium安装Markdown Viewer插件 在~/.vimrc中添加如下代码: 123456nmap &lt;F4&gt; :call Preview()&lt;CR&gt;func! Preview() if &amp;filetype == &apos;markdown.mkd&apos; exec &quot;!chromium-browser %&quot; endifendfunc 效果用Vim编辑Markdown文件时按F4会打开一个chromium窗口进行预览,每次保存文件时更新预览。 注意不要用Firefox，Firefox自动对离线文件的编码解析总不准确且不能修改默认的离线文件编码为Unicode，所以总是造成乱码。 参考Vim无插件实现Markdown文件实时预览","categories":[{"name":"Tools","slug":"Tools","permalink":"https://AIpynux.github.io/categories/Tools/"},{"name":"Vim","slug":"Tools/Vim","permalink":"https://AIpynux.github.io/categories/Tools/Vim/"}],"tags":[{"name":"Vim","slug":"Vim","permalink":"https://AIpynux.github.io/tags/Vim/"}]},{"title":"Improve the Speed of Git Clone from Github","slug":"Improve_the_Speed_of_Git_Clone_from_Github","date":"2019-01-20T06:57:53.000Z","updated":"2019-02-04T04:22:54.285Z","comments":true,"path":"2019/01/20/Improve_the_Speed_of_Git_Clone_from_Github/","link":"","permalink":"https://AIpynux.github.io/2019/01/20/Improve_the_Speed_of_Git_Clone_from_Github/","excerpt":"出现障碍更新Vim到8.1后检查插件状态，发现ale需要重新安装。 用的插件管理器是Vim-Plug，在.vimrc.bundles中添加: 1Plug &apos;w0rp/ale&apos; 之后在Vim中执行命令 :PlugInstall 看着屏幕上的进度条一点点地跑到终点，终端却抛来如下错误:","text":"出现障碍更新Vim到8.1后检查插件状态，发现ale需要重新安装。 用的插件管理器是Vim-Plug，在.vimrc.bundles中添加: 1Plug &apos;w0rp/ale&apos; 之后在Vim中执行命令 :PlugInstall 看着屏幕上的进度条一点点地跑到终点，终端却抛来如下错误: 1234error: RPC failed; curl 18 transfer closed with outstanding read data remainingfatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failed 分析原因看上诉错误的字面意思是下载的包在传输过程中提前结束。我以为凑巧出错便重新下载。 经过实验多次，这样的错误发生不是偶然。之后,经过查阅文档,我发现Vim-Plug实际上采 用git来下载安装Github上的插件项目。然而,国内用终端克隆Github上Repository速度特慢, 猜测此次障碍可能由此造成。 解决办法1. 为git设置代理在设置了SS代理的前提下，从终端输入: 12git config --global http.https://github.com.proxy socks5://127.0.0.1:1080git config --global https.https://github.com.proxy socks5://127.0.0.1:1080 2. 修改Hosts用以下命令查找github.global.ssl.fastly.Net和github.com对应的IP地址:12nslookup github.global.ssl.fastly.Netnslookup github.com 之后将IP地址和域名对添加到/etc/hosts文件。 最终效果git clone的速度从10.0KB/s提升到150.0KB/s;出现的插件下载安装障碍得到解决。 参考文章git clone速度太慢解决方案 git clone一个github上的仓库，太慢…","categories":[{"name":"Tools","slug":"Tools","permalink":"https://AIpynux.github.io/categories/Tools/"},{"name":"Git","slug":"Tools/Git","permalink":"https://AIpynux.github.io/categories/Tools/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://AIpynux.github.io/tags/Git/"}]},{"title":"Ubuntu16.04备份重装成根目录可扩容LVM方式Linux系统","slug":"Ubuntu16.04备份重装成根目录可扩容的LVM方式Linux系统","date":"2019-01-20T06:56:53.000Z","updated":"2019-02-04T01:57:19.880Z","comments":true,"path":"2019/01/20/Ubuntu16.04备份重装成根目录可扩容的LVM方式Linux系统/","link":"","permalink":"https://AIpynux.github.io/2019/01/20/Ubuntu16.04备份重装成根目录可扩容的LVM方式Linux系统/","excerpt":"说明:为了区分原先系统和重装后系统以及述说方便，将原先系统称作Ubuntu1，重装后系统称作Ubuntu2。 先看一下我Ubuntu1的一些信息：","text":"说明:为了区分原先系统和重装后系统以及述说方便，将原先系统称作Ubuntu1，重装后系统称作Ubuntu2。 先看一下我Ubuntu1的一些信息： 一、备份进入Ubuntu1，输入su root切换root，将设备/dev/sdb1（选一个你机器上有空余空间未挂载的分区）挂载到/tmp。终端输入tar -cvpzf /tmp/back/back.tgz / –exclude=/proc –exclude=/lost+found –exclude=/tmp –exclude=/sys –exclude=/media。将Ubuntu1上所有挂载在/目录下的文件(除了/目录下proc、lost+found、tmp、sys和media文件夹)压缩在已挂载/dev/sdb1设备的目录/tmp的back文件夹下，并命名为back.tgz。 12345注意：1. /tmp下的back文件夹须事先创建。2. 备份时勿包括/dev/sdb1所挂载的目录（此处为/tmp）。3. 记下那些备份时未包括进来的目录（即proc等），最后恢复时需要手动mkdir创建，否则系统会出错。4. 最后压缩结束后可能会出现 tar: 由于前次错误，将以上次的错误状态退出。这个不用理会即可。 二、分配磁盘右击此电脑–&gt;管理 得到计算机管理窗口–&gt;点击磁盘管理–&gt;右键单击选择要压缩的磁盘 在输入压缩空间量（MB）里填写要压缩出的空间量,我这里压缩50G–&gt;压缩 注：这里得到未分配的磁盘为待会我们用Linux进行LVM式分区做准备。(电脑若有有空闲空间的设备直接跳过此步骤到第三步进行分区） 三、分区制作Ubuntu16.04的U盘启动盘，进入试用即LiveCD模式。首先在终端输入sudo passwd root，改变试用系统下root用户的密码。之后输入su root切换成root用户，之后的大多操作都需要root权限。 终端输入fdisk -l找到划分好有空闲空间的磁盘设备名。 我主机上有未分配磁盘空间的设备是/dev/sdb。所以终端输入fdisk /dev/sdb。输入n新建一个分区(/dev/sdb6)。分区号为6–&gt;分区起始扇区按回车默认设置–&gt;分区终结扇区输入+49G，代表起始扇区往后数49G的扇区，意味给分区分配49G。此分区待会制成lv时会分成给Ubuntu2的/、swap交换空间和/home对应的三个lv分区，此时先成一个就好,但需将分区类型标志改成LVM。 输入t改变分区标志–&gt;分区号为6–&gt;输入L查找代表LVM的代码–&gt;查得30代表LVM，输入30，修改标志成功。 输入n新建另一个分区(sdb7)对应给Ubuntu2的/boot，分配剩下的1G给此分区，此分区不需要改成LVM，不改标志。 输入p查看分区是否正确，确认无误后输入w写入并退出fdisk。 终端输入partprobe更新分区信息。再输入fdisk -l /dev/sdb查看分区创建成功否。 四、创建PV、VG、LV终端输入pvcreate /dev/sdb6创建pv，输入pvscan查看目前有哪些pv检查创建成功否。终端输入vgcreate hgneer1 /dev/sdb6创建名字为hgneer1（随自己定义的名字）的vg，输入vgscan查看目前有哪些pv检查创建成功否。终端输入lvcreate -L +25G -n root hgneer1（刚才创建的vg），表示创建一个大小为25G的/dev/mapper/hgneer1-root的lv分区，预定作为Ubuntu2的/对应的分区。终端输入lvcreate -L +8G -n swap hgneer1（刚才创建的vg），表示创建一个大小为8G的/dev/mapper/hgneer1-swap的lv分区，预定作为Ubuntu2的swap交换空间对应的分区。终端输入lvcreate -L +16G -n home hgneer1（刚才创建的vg），表示创建一个大小为16G的/dev/mapper/hgneer1-home的lv分区，预定作为Ubuntu2的/home对应的分区。终端输入lvscan检查所需lv创建成功否。确认无误后，lvm分区真正创建。 五、重装系统点击桌面上的“install Ubuntu16.04.3 LTS”开始安装 安装时选择其他选项，自行分区选择调整。/dev/mapper/hgneer1-home分区挂载到/home目录，选中格式化成Ext4日志文件系统/dev/mapper/hgneer1-root分区挂载到/目录，选中格式化成Ext4日志文件系统/dev/mapper/hgneer1-swap分区作为swap交换空间/dev/sdb7分区挂载到/boot目录，选中格式化成Ext4日志文件系统另外注意安装启动引导器的设备选择挂载到/boot目录的/dev/sdb7，否则很可能无法引导出Linux系统！！！ 等待安装成功后，先不要重启，继续试用，看新装上的系统Ubuntu2是否使用了LVM。终端输入mount /dev/mapper/hgneer-root /mnt挂载Ubuntu2的/到试用系统的/mnt。终端输入mount /dev/mapper/hgneer-home /mnt/home挂载Ubuntu2的/home到试用系统的/mnt/home。终端输入mount /dev/sdb7 /mnt挂载Ubuntu2的/boot到试用系统的/mnt/boot。cd到上面几个目录下看下，确定不为空系统成功装上后终端输入chroot /mnt将/mnt改成根目录，而后关机。 六、恢复数据及配置重启进入Ubuntu2系统。将/etc/fstab文件及/boot目录备份到挂载了/dev/sdb1的/tmp的back文件夹中。这些文件记载了Ubuntu2的启动信息以及Ubuntu2各重要目录所在的分区信息，这些文件与Ubuntu1不一样的因此在之后解压备份文件后需要把这些文件替换到对应目录下。 重启进入liveCD（U盘启动盘试用）。照前文一样命令获取试用系统的root权限。 终端输入mount /dev/mapper/hgneer-root /mnt挂载Ubuntu2的/到试用系统的/mnt。 终端输入mount /dev/mapper/hgneer-home /mnt/home挂载Ubuntu2的/home到试用系统的/mnt/home。 终端输入mount /dev/sdb7 /mnt/boot挂载Ubuntu2的/boot到试用系统的/mnt/boot。 cd到/mnt目录后，终端输入ls | xargs rm -rf，删除Ubuntu2系统根目录下的全部目录及文件。 终端输入mount /dev/sdb1 /tmp挂载D盘到/tmp目录，cd到/tmp/back后终端输入tar -xvpf back.tgz -C /mnt。 最终目的将Ubuntu1的备份下数据文件解压到/mnt即Ubuntu2的根目录下。 等到解压完成后cd到/mnt后，终端输入mkdir proc lost+found tmp sys media，创建Ubuntu1备份时未选中的目录。将备份在设备/dev/sdb1即现挂载在/tmp目录下的back文件夹中的fstab拷贝替换到/mnt/etc目录下。将备份在设备/dev/sdb1即现挂载在/tmp目录下的back文件夹中的/boot文件夹中的文件拷贝到/mnt/boot目录下。终端输入chroot /mnt转换/mnt当作根目录。重启进入Ubuntu2，根目录可扩容且用户数据配置与Ubuntu1完全一致的Linux系统完成！","categories":[{"name":"Linux","slug":"Linux","permalink":"https://AIpynux.github.io/categories/Linux/"},{"name":"Ubuntu","slug":"Linux/Ubuntu","permalink":"https://AIpynux.github.io/categories/Linux/Ubuntu/"},{"name":"磁盘阵列","slug":"磁盘阵列","permalink":"https://AIpynux.github.io/categories/磁盘阵列/"},{"name":"LVM","slug":"磁盘阵列/LVM","permalink":"https://AIpynux.github.io/categories/磁盘阵列/LVM/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://AIpynux.github.io/tags/Ubuntu/"}]}]}